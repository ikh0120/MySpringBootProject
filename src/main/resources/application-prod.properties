myboot.name=Prod Env

#log level
logging.level.com.basic.myspringboot=info

# mariadb db 정보
spring.datasource.url=jdbc:mariadb://127.0.0.1:3306/boot_db
spring.datasource.username=boot
spring.datasource.password=boot
spring.datasource.driverClassName=org.mariadb.jdbc.Driver

# hibernate 정보
    # DDL(=Data Definition Language: 데이터 정의어):
        # CREATE(생성), ALTER(수정), DROP(삭제), TRUNCATE(초기화)
    # DML(=Data Manipulation Language: 데이터 조작어):
        # SELECT, INSERT, UPDATE, DELETE
    # DCL(=Data Control Language: 데이터 제어어):
        # GRANT(권한부여), REVOKE(권한박탈, 권한회수), COMMIT(트랜잭션 작업이 정상적으로 완료되었음을 알림), ROLLBACK(트랜잭션 작업이 비정상적으로 종료되었을 때 원상태로 복구)

    # spring.jpa.hibernate.ddl-auto=XXX
        # DEV(개발)환경에 쓰는 방식
            # create: JPA가 DB와 상호작용할 때 기존의 스키마(테이블)를 삭제하고 새로 만드는 것을 뜻함
                # Application을 시작할 때 drop하고 새로 생성
            # create-drop: JPA 종료 시점에 기존에 있던 테이블 삭제
                # Application을 종료할 때 drop하고 새로 생성
            # update: 기존 스카마는 유지, 새로운 것만 추가, 기존의 데이터 유지. 변경된 부분만 반영함
                # 주로 개발할 때 적합
                # 컬럼을 추가할 수는 있지만 컬럼 삭제가 안됨
        # PROD(운영)환경에서 쓰는 방식
        # Table Schema 먼저 선언 => Entity와 매핑 정보만 검증
            # validate: 엔티티, 테이블이 정상 매핑 되어있는지 검증함
                # DB에만 있고  Entity 클래스에 없는 컬럼은 검사대상이 아니어서 오류가 안남
spring.jpa.hibernate.ddl-auto=update 

# JPA가 생성한 SQL문을 보여줄 지에 대한 여부를 알려주는 property임
# 앞쪽에 Hibernate: drop table if exists customers처럼 찍어줌
spring.jpa.show-sql=true

# dialect: 방언 => DB마다 SQL문이 살짝 달라서 알려줘야지만이 올바른 dialect로 sql문을 넣어줌
# 어떤 DB를 사용하는지 알려주는 것
spring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect

# 뒤쪽에 : drop table if exists customers처럼 찍어줌
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
